//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class outreachpmsEntities : DbContext
    {
        public outreachpmsEntities()
            : base("name=outreachpmsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<city> cities { get; set; }
        public virtual DbSet<@class> classes { get; set; }
        public virtual DbSet<division> divisions { get; set; }
        public virtual DbSet<group> groups { get; set; }
        public virtual DbSet<month> months { get; set; }
        public virtual DbSet<parameter> parameters { get; set; }
        public virtual DbSet<parameterschoolmap> parameterschoolmaps { get; set; }
        public virtual DbSet<performanceyear> performanceyears { get; set; }
        public virtual DbSet<role> roles { get; set; }
        public virtual DbSet<school> schools { get; set; }
        public virtual DbSet<student> students { get; set; }
        public virtual DbSet<studentdailyperformance> studentdailyperformances { get; set; }
        public virtual DbSet<studentschoolmap> studentschoolmaps { get; set; }
        public virtual DbSet<studentteacher> studentteachers { get; set; }
        public virtual DbSet<teacher> teachers { get; set; }
        public virtual DbSet<user> users { get; set; }
    
        public virtual ObjectResult<GetDataForExcelUpload_Result> GetDataForExcelUpload(string schoolName, string @class, string month, string year)
        {
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataForExcelUpload_Result>("GetDataForExcelUpload", schoolNameParameter, classParameter, monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DuplicateCheckForPerformanceBulkUpload(Nullable<int> schoolId, Nullable<int> classId, Nullable<int> day, Nullable<int> month, Nullable<int> year)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("day", day) :
                new ObjectParameter("day", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DuplicateCheckForPerformanceBulkUpload", schoolIdParameter, classIdParameter, dayParameter, monthParameter, yearParameter);
        }
    }
}
